package com.kh.chap01_abstraction.run;

import com.kh.chap01_abstraction.model.vo.Student;

public class Run {

	/*
	 * 1. 객체지향언어 : "객체" 를 "지향" 하는 언어로 
	 * 즉, "객체 중심" 으로 돌아가는 코드를 짜겠다.
	 * 
	 * 2. 객체 : 사전적 의밀는 현실세계에서 독립적으로 존재하는
	 * 			목적이 있고, 의미도 있는 모든 것들을 의미함 (유형, 무형, 개념, 사물, ...)
	 * 3. 객체지향프로그래밍 : 현실세계의 독립적인 존재들 (객체) 의 상호작용을
	 * 					  프로그래밍을 통해 가상세계 (코드) 로 구현하는 과정
	 * > 결론적으로, 객체지향프로그래밍은
	 *   현실세계의 것을 프로그래밍으로 녹여 하나의 프로그램 (코드) 으로 만들어 내는 과정임!!
	 *   
	 *   예) 오프라인 옷가게 --> 인터넷 쇼핑몰
	 *       오프라인 학원 --> 인강 플랫폼
	 *       오프라인 은행 창구 --> 인터넷 뱅킹(은행 어플)
	 *       
	 * 4. 그러면 현실세계의 것을 어떻게 코드로 구현하는데?
	 * "클래스" 라는 틀을 먼저 만들어야함
	 * 어떻게? 1단계 추상화 + 2단계 캡슐화
	 * 
	 * 5. "추상화" 과정
	 * 현실세계의 것을 어떻게 프로그래밍 해볼건지 고민해보는 과정
	 * 예) 학생관리 프로그램
	 * 0) 내가 만들고 싶은 프로그램이 뭔지 생각해보기
	 * 예) "학생" 객체가 필요함
	 * 1) 내구 구현하고자 하는 포르갬에 필요한 객체들이 무엇이 있는지 생각해보기
	 * 예) "학생" 이라면 응당 가져야하는것들
	 * 2) 그 객체들이 가지고 있는 공통적인 정보(속성), 행위(기능,동작)들을 모두 추출해낼 것
	 *  이름, 나이, 성별, 주소, 전화번호, 키, 몸무게, 발사이즈, 달리기속도.
	 *  국어점수, 수학점수, 머리색, 학년, 반,....
	 *  밥을 먹는다, 숨을 쉰다, 공부를 한다, 잠을 잔다,...
	 * 3) 그렇게 추출한 것들을 가지고 내가 구현할 프로그램의 "실질적인 목적" 에 맞춰
	 *    불필요한 정보 및 행위들을 걷어낼 것
	 * 예) 학생관리 프로그램
	 *     학생의 "건강정보" 관리 프로그램
	 *     - 이름, 나이, 성별, 키, 몸무게, 발사이즈, 달리기속도, 밥을 먹는다, 숨을 쉰다. 잠을 잔다
	 *     학생의 "성적정보" 관리 프로그램
	 *     - 이름, 학년, 반, 국어점수, 수학점수, 공부를 한다
	 * 4) 최종적으로 추려진 것들을 가지고 어떤 자료형의 어떤 이름을 사용할 건지
	 *    생각해보기 (즉, 어떻게 코드로 짤건지 고민하기)
	 * 
	 * 예) 최종적으로 추려낸 것 : 이름, 나이, 키 라는 가정 하에
	 * 		이름 => String name;
	 * 		나이 => int age;
	 *      키   => double height;
	 *      
	 *  > 최종적으로 위의 내용을 가지고 프로그래밍 할 것!!     
	 * 
	 * 
	 *  6. 위에 선정된 것들을 가지고 본격적인 프로그래밍을 해보자
	 *  1) "변수" 만을 가지고 프로그래밍을 하게된다면?
	 *      변수 : 하나의 자료형인 하나의 값만으로 보관할 수 있음  
	 *     예) "홍길동 학생" 이라는 객체를 만들기 위해서
	 *    String name1 = "홍길동"; int age1 = 20; double height1 = 168.7;
	 *    String name2 = "김영희"; int age2 = 21; double height2 = 172.4;
	 *    String name3 = "김갑생"; int age3 = 26; double height3 = 183.9;
	 *    ...
	 *    > 수백명의 학생 관리하는 프로그램을 구현해야 할 경우
	 *      수천 수만개의 변수가 생겨날 것임!! (관리하기가 굉장히 힘듬)
	 *2) "배열" 을 이용해서 프로그래밍을 하게된다면?
	 *    배열 : 하나의 자료형인 여러개의 값들을 보관할 수 있음
	 *     학생들의 "이름" 을 보관할 수 있는 배열
	 *     String[] name = {"홍길동", "김영희", "김갑생", "박말똥"....};
	 *     학생들의 "나이"를 보관할 수 있는 배열
	 *     int[] age  = {20,21,26,30,...};
	 *     학생들의 "키" 를 보관할 수 있는 배열
	 *     double[] height = {168.7, 172.4, 183.9, 175.5};
	 *     > 변수만 쓰는 것보다는 훨씬 나아보임
	 *     > 만약에 한명의 학생이 전학을 가게 된다면?
	 *       해당 인덱스의 값을 정확하게 삭제해야함!!
	 *       삭제 시, 다른 인덱스의 값을 실수로 지운다면?
	 *       만약에 한명의 학생이 전학을 온다면?
	 *       정확하게 인덱스 수를 맞춰서 추가해야함!!    
	 *       -학생의 정보가 빈번하게 추가, 수정, 삭제가 일어날 경우
	 *       인덱스가 어그러지는 순간 데이터 불일치 현상이 일어남
	 *       - 배열의 특징 상 한번 지정된 크기는 절대 변경이 불가함
	 *       (더 큰 크기의 배열로 깊은 복사 후 새로 추가해야 함)
	 * 3) 그래서 나온 개념이 "구조체" 라는 개념
	 *    구조체 : 한번에 여러개의 자료형을 보관할 수 있는 배열 같은 형태.
	 *            String 값도 보관하고, int 값도 보관하고, double 값도 보관할 수 있는
	 *            나만의 배열같은 자료형을 하나 만들자!! > 그게 바로 "클래스"
	 *    클래스 : 각 객체들의 속성 정보를 담아내는 그릇과도 같은 존재
	 *    > 그동안 우리는 이 클래스를 단순히 "메소드 (기능)" 를 정의하는 용도로만 썼었음!!
	 *     기능 위주의 클래스 : Controller 클래스
	 *    > 오늘부터는 객체지향 프로그래밍을 위해 정보들을 담는 용도의 클래스도 만들것임!!
	 *    정보들을 담는 용도의 클래스 : VO (Value Object) 클래스
	 *    
	 *            
	 *         
	 *          
	 *      	
	 * 
	 */
	public static void main(String[] args) {

		// 학생관리 프로그램 만들기
		// 1. 변수만 가지고 프로그래밍 하면?
		
		/*
		String name1 = "홍길동";
		int age1 = 20;
		double height1 = 168.7;
		*/
		
		// 2. 배열만 가지고 프로그래밍 하면?
		/*
		String [] name = {"홍길동", "김영희", ..}
		int[] age = {20,21,..};
		double[] height= {168.7,173.9};
		*/
		
		
		// 3. 그래서 나온 개념이 "구조체"
		// > 자바에서는 "클래스" 라고 부른다.
		// Student 클래스 (학생 정보를 담을 틀, 그릇)
		// 를 만들고 나서 Student 클래스를 통해 "객체" 생성
		
		
		// * 객체 생성하기
		// [ 표현법 ]
		// 클래스명 객체명 = new 클래스명();
		// > 그동안 만들었었던 대변할이름이 객체명이였음!!
		// > 객체 또한 "변수" 임!! 단, 참조자료형 변수임
		
		
		
		
		// - 홍길동 학생의 객체 만들기
		 Student hong  = new Student();
		// > 항상 생성 먼저!! (메모리의 heap 영역 확보)
		
		// 각 방에 직접적으로 접근해서 값을 대입
		// 배열의 경우 : 배앨명[방번호] = 값;
		// 객체의 경우 : 객체명.필드명 = 값;
		
		hong.name = "홍길동";
		hong.age = 20;
		hong.height = 168.7;
		 // > 필드 접근 시 . 을 통해서 접근할 수 있다.
		 
		 // - 김영희 학생 객체 만들기
		 Student kim = new Student();
		 
		kim.name = "김영희";
		kim.age = 21;
		kim.height = 172.4;
		 
		//학생들의 정보를 출력
		 System.out.println(hong);
		 System.out.println(kim);
		// > 객체명만 단순히 출력문으로 출력해보면
		// 실제 내용물이 아닌 주소값이 full클래스명 + "@" + 주소값
		// 형태로 출력된다.
		
		
		// 주소값을 해시코드 형태로 출력
		System.out.println(/*객체명*/hong.hashCode());
		 System.out.println(kim.hashCode());
		 
		// 그렇다면 실제 담긴 데이터를 출력하고자 한다면?
		// 배열의 경우 : 출력문(배열명[방번호]);
		// 객체의 경우 : 출력문(객체명.필드명);
		
		// "xxx님의 나이는 xx살이고, 키는 xxx.xcm 입니다. 형식으로 출력
		 System.out.println(hong.name+ " 님의 나이는 " + 
				 			hong.age + "살이고, 키는 " +
				 			hong.height + "cm 입니다.");
		 System.out.printf("%s님의 나이는 %d살이고, 키는 %.1fcm 입니다.\n",hong.name,hong.age,hong.height);
		 // > .을 통해 직접적으로 접근해서 값 조회도 가능하다.
		 
		 
		 //객체명.필드명으로
		 // . 을 통해 조회든 대입이든 간에 "직접적" 으로 "접근" 하고있다.
		 // (. : 직접접근연산자, 참조자료형의 주소값을 실제로 타고 들어가겠다)
		 // > 직접적으로 접근해서 값을 대입 및 조회 할 경우
		 //    보안 문제가 생길 수 있다.
		 // > 객체지향 설계 원칙 중 하나가 "정보은닉"
		 //    (정보를 숨김처리 하겠다)
		 // > 이 원칙을 지키기 위해서는 만들었었던 Student 클래스의
		 //   코드를 살짝 수정해야함 (직접 접근이 불가능하도록)
		 //   "캡슐화" 
		 
		 
	
	}

}
